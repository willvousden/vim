Plug 'bufbuild/vim-buf'

if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
let g:deoplete#enable_at_startup = 1

" Local vimrc files.
Plug 'embear/vim-localvimrc'

" CtrlP!
let g:ctrlp_show_hidden = 1
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
Plug 'ctrlpvim/ctrlp.vim'
set wildignore+=*/tmp/*
set wildignore+=*/build/*
set wildignore+=*/node_modules/*
set wildignore+=*/__pycache__/*
set wildignore+=*.so
set wildignore+=*.o
set wildignore+=*.class
set wildignore+=*.swp
set wildignore+=*.pyc
set wildignore+=*.pyc

set showtabline=2
let g:solarized_termcolors = 16
let g:lightline = {
    \ 'colorscheme': 'solarized_custom',
    \ 'tabline': {
    \   'left': [ ['buffers'] ],
    \   'right': [ ['close'] ]
    \ },
    \ 'component_expand': {
    \   'buffers': 'lightline#bufferline#buffers'
    \ },
    \ 'component_type': {
    \   'buffers': 'tabsel'
    \ }
  \ }
let g:lightline#bufferline#min_buffer_count = 2
let g:lightline#bufferline#show_number = 1
let g:lightline#bufferline#clickable = 1
let g:lightline.component_raw = {'buffers': 1}
Plug 'mengelbrecht/lightline-bufferline'
Plug 'itchyny/lightline.vim'
" We don't need to show the mode in the normal way, as lightline does this for us.
set noshowmode

let g:tmuxline_powerline_separators = 0
let g:tmuxline_theme = "lightline"
let g:tmuxline_preset = "full"
Plug 'edkolev/tmuxline.vim'

" Destroy the current buffer without closing the split.
nmap <leader>d :bp<bar>sp<bar>bn<bar>bd<cr>

" NERDTree stuff and TagList.
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'majutsushi/tagbar'
let g:NERDTreeWinPos="right"
let g:NERDTreeMinimalUI=1
let g:NERDTreeIgnore = ['\.pyc$', '__pycache__$', '^\.git$[[dir]]']
let g:NERDTreeShowFilesLines=1
let g:NERDTreeShowHidden=1
nnoremap <leader>n :NERDTreeFocus<cr>

Plug 'sjl/gundo.vim'
let g:gundo_right=1
let g:gundo_return_on_revert=0
let g:gundo_prefer_python3 = 1

" White space stuff.
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
Plug 'tpope/vim-sleuth'

Plug 'vim-autoformat/vim-autoformat'

" Syntax plugins.
Plug 'editorconfig/editorconfig-vim'
Plug 'hashivim/vim-terraform'
Plug 'chr4/nginx.vim'
Plug 'ekalinin/Dockerfile.vim'
Plug 'bfrg/vim-cpp-modern'
Plug 'lifepillar/pgsql.vim'
Plug 'slim-template/vim-slim'
Plug 'zaiste/tmux.vim'
Plug 'udalov/kotlin-vim'
Plug 'pangloss/vim-javascript'
Plug 'lepture/vim-jinja'
Plug 'HerringtonDarkholme/yats.vim'

" Python things.  Switch off folding from the python-syntax plugin; let SimpylFold handle it.
let g:python_highlight_all=1
Plug 'vim-python/python-syntax'
Plug 'hynek/vim-python-pep8-indent'
let g:SimpylFold_docstring_preview=1
Plug 'tmhedberg/SimpylFold'

" CSS.
Plug 'ap/vim-css-color'
Plug 'hail2u/vim-css3-syntax'
Plug 'cakebaker/scss-syntax.vim'

" FastFold configuration.
Plug 'Konfekt/FastFold'
nmap zuz <Plug>(FastFoldUpdate)
let g:fastfold_savehook = 1
let g:fastfold_fold_command_suffixes = ['x', 'X', 'a', 'A', 'o', 'O', 'c', 'C']
let g:fastfold_fold_movement_commands = [']z', '[z', 'zj', 'zk']

" Convenience plugins.
let g:SuperTabDefaultCompletionType = '<c-n>'
Plug 'ervandew/supertab'
Plug 'andymass/vim-matchup'
Plug 'christoomey/vim-tmux-navigator'

Plug 'tpope/vim-git'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
let NERDSpaceDelims = 1
Plug 'sukima/xmledit'

Plug 'lifepillar/vim-solarized8', { 'branch': 'neovim' }

call plug#end()

" Colours.
if &t_Co > 2 || has("gui_running")
    syntax on
    set hlsearch

    " Only set a nice colour scheme if the term supports it.
    if &t_Co >= 16 || has("gui_running")
        let g:solarized_t_Co=16
        set notermguicolors
        set background=light
        colorscheme solarized8
    endif
endif

" Set bash-style autocomplete behaviour.
if has("wildmenu")
    set wildmenu
    set wildmode=longest,list
    set wildignore+=*.a,*.o
    set wildignore+=.DS_store,.git,.hg,.svn
    set wildignore+=*~,*.swp,*.tmp

    if has("wildignorecase")
        set wildignorecase
    endif
endif

nmap <silent> <leader>u :syntax sync fromstart<CR>:redraw!<CR>
nmap <silent> <leader>l :set list!<CR>

" Paste mode shortcut.
nnoremap <silent> <leader>p :set paste!<CR>

" Disable annoying ex mode key.
nnoremap Q <nop>

" It's really annoying when I type :W accidentally because I don't lift my finger off SHIFT quickly
" enough.
if !exists(":W")
    command W :w
endif

" Disable automatic jump to next result on word search.
nmap <silent> * /\<<C-r><C-w>\><CR>N
nmap <silent> # ?\<<C-r><C-w>\><CR>N

" Replace word under cursor.
nmap <leader>S :%s/\<<C-r><C-w>\>/

" Search for/replace selection.
vmap <leader>s y/<C-r>"<CR>
vmap <leader>S y:%s/<C-r>"/

" Send previous yank to clipboard (via Clipper).
nmap <leader>y :call system('clip', @0)<CR>:exe ":echo 'Anonymous buffer sent to Clipper.'"<CR>

" Session managment.
set sessionoptions=blank,buffers,curdir,folds,help,resize,tabpages,winsize

" Mappings for editing and reloading vimrc.
map <leader>v :sp<CR>:e $MYVIMRC<CR><C-w>_
map <silent> <leader>V :source $MYVIMRC<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>

" Mappings for session managment.
map <leader>q :mksession! $HOME/.vimsession<CR>:exe ":echo 'Session saved!'"<CR>
map <leader>Q :source $HOME/.vimsession<CR>:exe ":echo 'Session loaded!'"<CR>

" Set backup and history things.
set dir=~/.tmp
set backupdir=~/.tmp
set backup

" Always enable status line.
set laststatus=2

" Folding mappings.
nnoremap <silent> <CR> za
nnoremap <silent> <leader><CR> zA

if has("autocmd") && !exists("autocommands_loaded")
    let autocommands_loaded = 1

    " Remapping <CR> can cause some problems in the command line and quickfix windows, so work around
    " this clash:
    autocmd CmdwinEnter * nnoremap <CR> <CR>
    autocmd BufReadPost quickfix nnoremap <CR> <CR>

    " Vim has a habit of clearing the clipboard on exit.  Undo this stupid behaviour.
    autocmd VimLeave * call system("xsel -ib", getreg("+"))

    " FIXME Verify this!
    autocmd BufReadPost * let [&tabstop, &softtabstop] = [&shiftwidth, &shiftwidth]

    " Sidebar mappings.
    autocmd VimEnter * nnoremap <silent> <Tab> :NERDTreeToggle<CR><c-w>=
    autocmd VimEnter * nnoremap <silent> <S-Tab> :TagbarToggle<CR>
    autocmd VimEnter * nnoremap <leader>g :GundoToggle<CR>

    " Make sure SimpylFold works properly.
    autocmd BufWinEnter *.py setlocal foldexpr=SimpylFold#FoldExpr(v:lnum) foldmethod=expr
    autocmd BufWinLeave *.py setlocal foldexpr< foldmethod<

    " Set syntax highlighting for Bash vim mode.
    autocmd BufRead,BufNewFile bash-fc-* set filetype=sh

    " Highlight "end" column.
    if exists('&colorcolumn')
        autocmd FileType * let &colorcolumn=&textwidth+1
    endif

    " Remember positions in files with some Git-specific exceptions.
    autocmd BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$")
        \     && expand("%") !~ "COMMIT_EDITMSG"
        \     && expand("%") !~ "ADD_EDIT.patch"
        \     && expand("%") !~ "addp-hunk-edit.diff"
        \     && expand("%") !~ "git-rebase-todo" |
        \     exe "normal! g`\"" |
        \ endif
endif

" Easy saving when lacking sudo permissions!
nnoremap <leader>W :w !sudo tee %<CR>

" Camel/Pascal case identifier navigation.
nnoremap <silent> <C-Left> :call search('\<\<Bar>\u', 'bW')<CR>
nnoremap <silent> <C-Right> :call search('\<\<Bar>\u', 'W')<CR>
inoremap <silent> <C-Left> <C-o>:call search('\<\<Bar>\u', 'bW')<CR>
inoremap <silent> <C-Right> <C-o>:call search('\<\<Bar>\u', 'W')<CR>

" Enable mouse support.
if has('mouse')
    set mouse=a
endif
